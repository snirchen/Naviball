<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>point_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.points_count = GEMS;
image_alpha = 0.2;
image_speed = 0;
image_index = 0;
image_xscale = 0;
image_yscale = 0;
point_disappear = 0;
f = 1;

/// @param target   instance to associate with tween (id or object index)
/// @param ease     easing script index id (e.g. EaseInQuad, EaseLinear)
/// @param mode     tween mode (0=ONCE, 1=BOUNCE, 2=PATROL, 3=LOOP, 4=REPEAT)
delta = true; //   whether or not to use delta(seconds) timing -- false will use step timing
/// @param delay    amount of time to delay tween before playing
/// @param dur      duration of time to play tween
/// @param prop     property setter string or TP*() script
/// @param start    starting value for eased property
/// @param dest     destination value for eased property
/// @param [...]    (optional) additional properties ("direction", 0, 360)

//TweenFire(id, EaseInOutBack, TWEEN_MODE_PATROL, delta, 0, 1.0, "image_angle", -10, 10);

f_can_replace_if_collision = true;
alarm[0] = 10;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>f_can_replace_if_collision = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.powerup_active[e_powerup_ID.MAGNET] == true)
{
    if (distance_to_object(obj_pong) &lt;= 210)
    {
        speed +=3 * global.dt_steady * global.imagesPerSecond;
        move_towards_point(obj_pong.x,obj_pong.y,speed);
    }
    else
    {
        vspeed = 0;
        hspeed = 0;
    }
}
else
{
    vspeed = 0;
    hspeed = 0;
}
////////////////////////////////////////////////////////////////////////////////
if (distance_to_object(obj_pong) &gt; 210)
{
    speed = 0;
}
if (place_free(x,y+9))
{
    y+=0
}
////////////////////////////////////////////////////////////////////////////////
if (global.die = true)
{
    if (image_alpha &gt; 0)
    {
        image_alpha -= 0.05;
    }
}
////////////////////////////////////////////////////////////////////////////////
if (image_alpha &lt; 1) &amp;&amp; (global.die = false)
{
    image_alpha += 0.05;
}
////////////////////////////////////////////////////////////////////////////////

if(point_disappear == 0)
{
    if (image_xscale&lt;1) &amp;&amp; (image_yscale&lt;1)
    {
        image_xscale += 0.1;
        image_yscale += 0.1;
    }
}
else
{
    if (image_xscale&gt;0) &amp;&amp;(image_yscale&gt;0)
    {
        image_xscale -= 0.1 * global.dt_steady * global.imagesPerSecond;
        image_yscale -= 0.1 * global.dt_steady * global.imagesPerSecond;
    }
    else
    {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pong">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.die = false)
{
    if(f = 1)
    {
        f = 0;
        if (image_index == 0) &amp;&amp; (global.die = false)
        {
            global.RealTimePoints += GEM_1_SCORE;
            //instance_create(x,y,plus_1_obj)
        }
        //------------------------------------------
        if (image_index == 1) &amp;&amp; (global.die = false)
        {
            global.RealTimePoints += GEM_2_SCORE;
            //instance_create(x,y,plus_2_obj)
        }
        //------------------------------------------
        if (image_index == 2) &amp;&amp; (global.die = false)
        {
            global.RealTimePoints += GEM_3_SCORE;
            //instance_create(x,y,plus_3_obj)
        }

        global.point_piano_level_sound++;
        
    if (global.sound = 1)
    {
        switch (global.point_piano_level_sound)
        {
            case 0 : 
                audio_play_sound(collect_coin_sound_effect_0, 10, false);
                break;
            case 1 : 
                audio_play_sound(collect_coin_sound_effect_1, 10, false);
                break;
            case 2 : 
                audio_play_sound(collect_coin_sound_effect_2, 10, false);
                break;
            case 3 : 
                audio_play_sound(collect_coin_sound_effect_3, 10, false);
                break;
            case 4 : 
                audio_play_sound(collect_coin_sound_effect_4, 10, false);
                break;
            case 5 : 
                audio_play_sound(collect_coin_sound_effect_5, 10, false);
                break;
            case 6 : 
                audio_play_sound(collect_coin_sound_effect_6, 10, false);
                break;
            case 7 : 
                audio_play_sound(collect_coin_sound_effect_7, 10, false);
                break;
            default : 
                audio_play_sound(collect_coin_sound_effect_0, 10, false);
                break;
        }
    }
    
        global.CaughtGems++;
        instance_create(x,y,take_point_obj);

        global.f_took_a_gem = 1;
        point_disappear = 1;
    
        if (global.points_count) &amp;&amp; (global.die = false)
        {
            global.points_count -= 1;

            if (global.points_count == 0)
            {
                Create_points();
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
