<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>wheel_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
----  Wheel of Fortune  ----
This engine allow you to use in whatever game what you want.
The first steps to edit this engine are in PDF in included files.
Thank you for your purchase. Do not forget to evaluate this project.
*/

pieces = 8; //Number of pieces on the wheel
negative_force = random_range(0.05, 0.1);//0.2; //Force to stop the whell
size = 360 / pieces; //Size of the pieces
rotated = 0; //If count reaches 0
rotate_spd = 0; //Speed of the rotation
count = 0.1 * room_speed; //Time in seconds for click in whell before she initialize stopping;
stoped = 0; //If the wheel stops

/*value[piece, 0] = value of piece*/
value[0, 0] = "Ball"; //First Value in whell
value[1, 0] = "25";
value[2, 0] = "100";
value[3, 0] = "25";
value[4, 0] = "Block";
value[5, 0] = "25";
value[6, 0] = "100";
value[7, 0] = "25";

/*value[piece, 1] = Minimum angle of the piece*/
/*value[piece, 2] = Maximum angle of the piece*/
/*DO NOT CHANGE*/
for(i = 0; i &lt; pieces; i++)
{
    if(i == 0)
    {
        value[i, 1] = 0;
        value[i, 2] = size;
    }
    else
    {
        value[i, 1] = size * i + 1;
        value[i, 2] = size * (i + 1);
    }
}

min_value = 10; //Minimum value to add in wheel rotation.
max_value = 30; //Maximum value to add in wheel rotation.
randomize();


global.stopper_move = 0;
global.last_piece_num =1;

global.prize_ammount = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.prize_start_disappear = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = round(image_angle); //Round the image angle, prevent bugs
for(i = 0; i &lt; pieces; i++)
{
    if(image_angle &gt;= value[i, 1] &amp;&amp; image_angle &lt;= value[i, 2])
    {
        /*
        Here is the action when the wheel stop
        */
        
        alarm[2] = 150;
        
        if(i!=0 &amp;&amp; i!=4)
        {            
            instance_create(0,0,white_screen_win_cherries_obj);
            switch (i)
            {
                case 1:
                    global.prize_ammount = 25;   
                    instance_create(x,y,cherries_screen_effect);
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_25_obj);
                    break;
                case 2:
                    global.prize_ammount = 100;   
                    instance_create(x,y,cherries_screen_effect);
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_100_obj);
                    break;
                case 3:
                    global.prize_ammount = 25;   
                    instance_create(x,y,cherries_screen_effect);
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_25_obj);
                    break;
                case 5:
                    global.prize_ammount = 25;  
                    instance_create(x,y,cherries_screen_effect); 
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_25_obj);
                    break;
                case 6:
                    global.prize_ammount = 100;  
                    instance_create(x,y,cherries_screen_effect); 
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_100_obj);
                    break;
                case 7:
                    global.prize_ammount = 25;   
                    instance_create(x,y,cherries_screen_effect);
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,plus_25_obj);
                    break;
            }
                                              
            if file_exists('pong_game_info.ini')
            {
                ini_open ("pong_game_info.ini");
                global.total_gems += global.prize_ammount;
                ini_write_real('TotalGems','total_gems',global.total_gems);
                ini_close();
            }
            global.prize_ammount = 0;
        }
        else
        {
            instance_create(0,0,white_screen_win_prize_obj);
            instance_create(0,0,confetti_animation_obj);
            switch (i)
            {
                case 0:  
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,item_prize);
                    GetRandomBall(); 
                    break;
                case 4:
                    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2,item_prize);
                    GetRandomBlock();
                    break;
            }
        }
        //show_message(value[i, 0]);
        i = pieces;
/*
        global.last_prize_date_time = date_current_datetime();
        if file_exists('pong_game_info.ini')
        {
            ini_open ("pong_game_info.ini");
            ini_write_real('PrizeInfo','last_prize_date_time',global.last_prize_date_time); 
            ini_close();
        }
    
        global.next_prize_date_time = date_inc_hour(global.last_prize_date_time,TIME_BETWEEN_PRIZES);
        CanGetPrize();
    */
        draw_text(440,1500,global.hours_to_next_prize);
        draw_text(540,1500,global.minutes_to_next_prize);
        draw_text(640,1500,global.seconds_to_next_prize);
        break;

    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotated = 1; //Ok the wheel are rotating
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CanGetPrize();
image_angle += rotate_spd * global.dt_steady * global.imagesPerSecond; //Add a speed to wheel

piece_num = FindPieceIndex(pieces,image_angle);

if (global.last_piece_num != piece_num)
{
    global.stopper_move = 1;
    global.last_piece_num = piece_num;
    obj_pointer.image_angle = 20;
            
    if (global.sound = 1)
    {
        audio_play_sound(roleta_stops_sound_effect, 10, false);
    }   
}

if rotated == 1 //If the time of wheel reaches 0
{
    if (rotate_spd &gt; negative_force) //If the rotate_speed are &gt; 0.1
    {
        if (rotate_spd &gt; 50 * global.dt_steady * global.imagesPerSecond)
        {
            rotate_spd -= negative_force*10; //Decrease faster
        }
        else if (rotate_spd &gt; 25 * global.dt_steady * global.imagesPerSecond)
        {
            rotate_spd -= negative_force*5; //Decrease median
        }
        else if (rotate_spd &gt; 10 * global.dt_steady * global.imagesPerSecond)
        {
            rotate_spd -= negative_force; //Decrease slowly
        }
        else if (rotate_spd &gt; 0)
        {
            rotate_spd -= negative_force/2; //Will stop
        }
    }
    else //If the rotate_speed reaches 0
    {
        rotate_spd = 0; //prevent the rotate_speed stay in negative
        if stoped == 0
        {
            alarm[1] = 1;
            stoped = 1 //The wheel was stopped
            
            if (global.sound = 1)
            {
                audio_play_sound(win_in_the_roleta_sound_effect, 10, false);
            }        
        }        
    }
}

if (image_angle &gt; 359) //Prevents image angle from 359
{
    image_angle = 0;
}

if (global.spin_wheel_f == 1)
{
    global.spin_wheel_f = 0;
    if (rotated == 0) //The time to click is not over yet
    {
        if alarm[0] == -1
    {
        alarm[0]= count; //Starts the countdown
        
            
            if (global.sound = 1)
            {
                audio_play_sound(roleta_whoosh_sound_effect, 10, false);
            }
    }
        rotate_spd +=  random_range(min_value, max_value);
    }
}
else
{
// Do nothing
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(!instance_exists(draw_time_to_next_spin_obj) &amp;&amp; !CanGetPrize())
{
    instance_create(SCREEN_WIDTH/2,SCREEN_HEIGHT/2+400,draw_time_to_next_spin_obj);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
