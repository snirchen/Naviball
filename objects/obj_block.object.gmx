<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>default_block_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>touches = 0;
randomize();
rotate_side = choose(0.75,-0.75);
state = 0;

image_speed = 0;
image_index = 0;

setstuff=1;
f_ball_touch_block = 0;


enum  break_state{
BS_IDLE                  = 0,
LOAD_TIME_BEFORE_BREAK   = 1,
WAIT_FOR_BREAK           = 2,
DIE                      = 3,
}

global.break_state       = break_state.BS_IDLE;


global.touchfrom = 1;

/// Wobble initialise


// setup variables used for calculation and keeping track of wobble
wobbling = false;
wobble = 0;

wobble_length = 1; // number of cycles to wobble the instance with
                   // only whole numbers are valid - ie: 1, 2, etc
wobble_speed = 0.3 //* global.dt_steady * global.imagesPerSecond; // valid value range: 0 - 13 (decimals are ok)
wobble_intensity = 12; // the distance multiplier (decimals are ok)

SetBlockSkin();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
if (global.counter)
{
    global.counter -= 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.break_time = 1;

vspeed = -10;
state = 1;

if(state == 1)
{
    gravity = 0.5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(touches &gt;= 4 &amp;&amp; (f_ball_touch_block == 0))
{
    instance_destroy();
if (global.counter)
{
    global.counter -= 1;
}

}

//StateMachineBreakTime();

if (speed == 0 &amp;&amp; setstuff=1)
{
    alarm[0]=140;
    setstuff=0;
}

if (speed !=0)
{
setstuff=1;
}


if (global.die = true)
{   
    if (global.counter)
    {
        global.counter -= 1;
    }
    instance_destroy()
}

if(state == 1)
{
    randomize();
    image_angle += rotate_side;
    image_alpha -= 0.035;
    
    if(image_alpha&lt;0)
    {
        if (global.counter)
        {
            global.counter -= 1;
        }
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pong">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>touches++;

if((alarm[0] &gt; 139)&amp;&amp;(f_ball_touch_block == 0))
{
    global.f_change_block_piano_level = 1;
    global.block_piano_level++;
    
    if (global.sound == 1)
    {
    
        //audio_play_sound(roleta_whoosh_sound_effect, 10, false);
        /*
        switch (global.block_piano_level)
        {
            case 0 : 
                audio_play_sound(touch_a_block_0, 10, false);
                break;
            case 1 : 
                audio_play_sound(touch_a_block_1, 10, false);
                break;
            case 2 : 
                audio_play_sound(touch_a_block_2, 10, false);
                break;
            case 3 : 
                audio_play_sound(touch_a_block_3, 10, false);
                break;
            case 4 : 
                audio_play_sound(touch_a_block_4, 10, false);
                break;
            case 5 : 
                audio_play_sound(touch_a_block_5, 10, false);
                break;
            case 6 : 
                audio_play_sound(touch_a_block_6, 10, false);
                break;
            default : 
                audio_play_sound(touch_a_block_0, 10, false);
                break;
        }*/
    }
    
   //global.break_state = break_state.LOAD_TIME_BEFORE_BREAK;
   f_ball_touch_block = 1;
    
    alarm[1] = 12; // destroy block after a sec
    
}
else if(f_ball_touch_block == 0)
{
    global.f_change_block_piano_level = 1;
    global.block_piano_level++;
    
    if (global.sound == 1)
    {
            //audio_play_sound(roleta_whoosh_sound_effect, 10, false);
    /*
        switch (global.block_piano_level)
        {
            case 0 : 
                audio_play_sound(touch_a_block_0, 10, false);
                break;
            case 1 : 
                audio_play_sound(touch_a_block_1, 10, false);
                break;
            case 2 : 
                audio_play_sound(touch_a_block_2, 10, false);
                break;
            case 3 : 
                audio_play_sound(touch_a_block_3, 10, false);
                break;
            case 4 : 
                audio_play_sound(touch_a_block_4, 10, false);
                break;
            case 5 : 
                audio_play_sound(touch_a_block_5, 10, false);
                break;
            case 6 : 
                audio_play_sound(touch_a_block_6, 10, false);
                break;
            default : 
                audio_play_sound(touch_a_block_0, 10, false);
                break;
        }
        */
    }  
    wobbling = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == 1)
{
  draw_self();
}
else
{

/// Draw wobble

var x_offset;

// has wobbling been initiated?
if wobbling {
    // increase wobble each step
    wobble += wobble_speed;
    }

// has wobbling exceeded the max number of cycles?
if wobble &gt; round(wobble_length) * (pi*2) {
    // stop instance from wobbling
    wobbling = false;
    // reset wobble to zero again
    wobble = 0;
    }

// calculate wobble with a sine wave (0 to 1)
// &amp; then multiply it by its intensity - this
// "wobble_intensity" dictates how many extra
// pixels it will wobble on a horizontal axis


switch(global.touchfrom)
{
    case 1 :
    {
        y_offset = -1* sin(wobble) * wobble_intensity;
        x_offset = 0;
        break;
    }
    case 3 :
    {
        y_offset = sin(wobble) * wobble_intensity;
        x_offset = 0;
        break; 
    }
    case 4 :
    {
        y_offset = 0;
        x_offset = -1 * sin(wobble) * wobble_intensity;
        break; 
    }
    case 2 :
    {
        y_offset = 0;
        x_offset = sin(wobble) * wobble_intensity;
        break;   
    }  
}

// draw sprite with the x_offset value added relatively
draw_sprite(sprite_index, 0, x + x_offset, y + y_offset);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-1,-1</point>
    <point>46,46</point>
  </PhysicsShapePoints>
</object>
